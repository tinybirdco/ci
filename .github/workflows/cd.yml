name: Tinybird CD

on:
  workflow_call:
    inputs:
      tb_deploy:
        description: "use tb deploy based on git releases"
        required: false
        type: boolean
        default: false
      data_project_dir:
        description: "relative path of the folder containing the data project"
        required: false
        type: string
        default: .
    secrets:
      tb_admin_token:
        required: true
      tb_host:
        required: true

jobs:
  push_changes:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    name: Push changes to Workspace
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 300
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token (user@domain.com)' associated to a user account and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          cat .tinyenv >> $GITHUB_ENV
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_ENV_NAME=$_NORMALIZED_ENV_NAME" >> $GITHUB_ENV

      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Tinybird version
        run: tb --version

      - name: Check all the data files syntax
        run: tb check

      - name: Check auth
        run: tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} auth info

      - name: Create new test Environment with data
        run: |
            tb \
              --host ${{ secrets.tb_host }}  \
              --token ${{ secrets.tb_admin_token }}  \
              env create tmp_cd_${_NORMALIZED_ENV_NAME}_${GITHUB_RUN_ID} \
              ${_ENV_FLAGS}

      - name: List changes with Workspace (should be empty)
        run: tb diff --main --no-verbose

      - name: Push changes to the test Environment
        run: |
            CI_DEPLOY_FILE=./deploy/${VERSION}/ci-deploy.sh
            if [ -f "$CI_DEPLOY_FILE" ]; then
              if ! [ -x "$CI_DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$CI_DEPLOY_FILE'. Run:"
                echo "> chmod +x $CI_DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $CI_DEPLOY_FILE
              fi
            else
              tb deploy --populate --fixtures --wait
            fi

      - name: List changes with test Environment (should be empty)
        run: tb diff

      - name: Deploy changes to the main Workspace
        run: |
            if ${{ inputs.tb_deploy }}; then
              tb env deploy --semver ${VERSION} --wait
              tb release ls
            else
              tb auth \
                  --host ${{ secrets.tb_host }} \
                  --token ${{ secrets.tb_admin_token }}
              CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
              if [ ! -f "$CD_DEPLOY_FILE" ]; then
                tb deploy
              fi
            fi

      - name: run post CD deploy commands
        run: |
            tb auth \
              --host ${{ secrets.tb_host }} \
              --token ${{ secrets.tb_admin_token }}
            CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
            if [ -f "$CD_DEPLOY_FILE" ]; then
              if ! [ -x "$CD_DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$CD_DEPLOY_FILE'. Run:"
                echo "> chmod +x $CD_DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $CD_DEPLOY_FILE
              fi
            fi

  cleanup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    if: ${{ always() }}
    needs: [push_changes]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token (user@domain.com)' associated to a user account and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Tinybird version
        run: tb --version       

      - name: Drop Environment
        run: |
          tb \
          --host ${{ secrets.tb_host }} \
          --token ${{ secrets.tb_admin_token }} \
          env rm tmp_cd_${_NORMALIZED_ENV_NAME}_${GITHUB_RUN_ID} \
          --yes
