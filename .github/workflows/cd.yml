name: Tinybird CD

on:
  workflow_call:
    inputs:
      tb_deploy:
        description: "use tb deploy based on git releases"
        required: false
        type: boolean
        default: false
      data_project_dir:
        description: "relative path of the folder containing the data project"
        required: false
        type: string
        default: .
    secrets:
      tb_admin_token:
        required: true
      tb_host:
        required: true

jobs:
  deploy:
    name: Deploy to main
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 300
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: 'pip'

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_ENV_NAME=$_NORMALIZED_ENV_NAME" >> $GITHUB_ENV
          cat .tinyenv >> $GITHUB_ENV
          echo >> $GITHUB_ENV # Ensures new line at the end of the file

      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Tinybird version
        run: tb --version

      - name: Check auth
        run: tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} auth info

      - name: Deploy changes to the main Workspace
        run: |
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ ! -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE not found, running default tb deploy command"
              if ${{ inputs.tb_deploy }}; then
                tb --semver ${VERSION} deploy --v3 ${CD_FLAGS}
                tb release ls
              else
                tb deploy
              fi 
            fi

      - name: Custom deployment to the main Workspace
        run: |
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE found"
              if ! [ -x "$DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$DEPLOY_FILE'. Run:"
                echo "> chmod +x $DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $DEPLOY_FILE
              fi
            fi

      - name: Post deploy
        run: |
          POSTDEPLOY_FILE=./deploy/${VERSION}/postdeploy.sh
          if [ -f "$POSTDEPLOY_FILE" ]; then
            if ! [ -x "$POSTDEPLOY_FILE" ]; then
              echo "Error: You do not have permission to execute '$POSTDEPLOY_FILE'. Run:"
              echo "> chmod +x $POSTDEPLOY_FILE"
              echo "and commit your changes"
              exit 1
            else
              $POSTDEPLOY_FILE
            fi
          fi
