
stages:
  - ci
  - cleanup
  - cd

variables:
  PYTHON_VERSION: "3.11"
  IMAGE_BASE: python:${PYTHON_VERSION}-slim-bullseye
  GIT_STRATEGY: "clone"
  GIT_CHECKOUT: "false"
  GIT_DEPTH: 300

.checkout_branch:
  before_script: &checkout_branch
    - git fetch origin "$CI_COMMIT_REF_NAME"
    - git checkout "$CI_COMMIT_REF_NAME"

.run_ci:
  stage: ci
  image: ${IMAGE_BASE}
  interruptible: true
  before_script:
    - *checkout_branch
  script:
    - _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
    - _CI_POPULATE="${CI_POPULATE:=--populate --wait}"
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=`echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev`

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - pip install tinybird-cli

    # Tinybird version
    - tb --version

    # Check all the data files syntax
    - tb check

    # Create new test Environment with data
    - |
      tb \
        --host $TB_HOST \
        --token $ADMIN_TOKEN \
        env create tmp_ci_${_NORMALIZED_ENV_NAME}_${CI_COMMIT_SHORT_SHA} \
        ${_ENV_FLAGS}

    # List changes with production Workspace
    - tb diff --production --no-verbose

    # Push changes to the test Environment
    - |
      PUSH_FILE=./deployment/${CI_COMMIT_REF_NAME}-push.sh
      if [ -f "$PUSH_FILE" ]; then
        ./deployment/${CI_COMMIT_REF_NAME}-push.sh
      else
        if $TB_DEPLOY; then
          tb deploy --populate --wait
        else
          tb push --push-deps --only-changes --fixtures --force ${_CI_POPULATE}
        fi
      fi

    # List changes with test Environment (should be empty)
    - tb diff

    - |
      if [ -f ./scripts/exec_test.sh ]; then
        ./scripts/exec_test.sh
      fi

    # Run data quality tests
    - tb test run -v

    # Run pipe regression tests
    - echo ${CI_MERGE_REQUEST_LABELS}
    - REGRESSION_LABELS=$(echo "${CI_MERGE_REQUEST_LABELS}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
    - echo ${REGRESSION_LABELS}
    - tb env regression-tests coverage --wait $(echo ${REGRESSION_LABELS} | tr , ' ')


.cleanup_ci_branch:
  stage: cleanup
  image: ${IMAGE_BASE}
  before_script:
    - *checkout_branch
  script:
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=`echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev`

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - pip install tinybird-cli

    # Tinybird version
    - tb --version

    # Remove test Environment
    - |
      tb \
      --host $TB_HOST \
      --token $ADMIN_TOKEN \
      env rm tmp_ci_${_NORMALIZED_ENV_NAME}_${CI_COMMIT_SHORT_SHA} \
      --yes

.run_cd:
  stage: cd
  image: ${IMAGE_BASE}
  interruptible: true
  before_script:
    - *checkout_branch
  script:
    - _CD_POPULATE="${CD_POPULATE:= }"
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - pip install tinybird-cli

    # Tinybird version
    - tb --version

    # Check all the data files syntax
    - tb check

    # Auth in the main Workspace
    - |
      tb auth \
      --host $TB_HOST \
      --token $ADMIN_TOKEN

    # List changes with main Workspace
    - tb diff --no-verbose

    # Push changes to the main Workspace
    - |
      PUSH_FILE=./deployment/${CI_COMMIT_REF_NAME}-push.sh
      if [ -f "$PUSH_FILE" ]; then
        ./deployment/${CI_COMMIT_REF_NAME}-push.sh
      else
        if $TB_DEPLOY; then
          tb deploy --populate --wait
        else
          tb push --push-deps --only-changes --force ${_CD_POPULATE}
        fi
      fi

    # List changes with main Workspace (should be empty)
    - tb diff
