
stages:
  - ci
  - cd
  - cleanup
  - release

variables:
  PYTHON_VERSION: "3.11"
  IMAGE_BASE: python:${PYTHON_VERSION}-slim-bullseye
  GIT_DEPTH: "300"


.validate_input: &validate_input
  - |
    if [[ $TB_ADMIN_TOKEN =~ .*TB_ADMIN_TOKEN ]]; then
      echo "Go to the tokens section in your Workspace, copy the 'admin token (user@domain.com)' associated to a user account and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1;
    fi

.run_ci:
  stage: ci
  image: ${IMAGE_BASE}
  interruptible: true
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
  script:
    - *validate_input
    - _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
    - source .tinyenv

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Check all the data files syntax
    - tb check

    # Check auth
    - tb --host $TB_HOST --token $TB_ADMIN_TOKEN auth info

    # Try delete previous Environment
    - |
      output=$(tb --host $TB_HOST --token $TB_ADMIN_TOKEN env ls)
      AUTHOR=$(echo "$CI_COMMIT_AUTHOR" | sed -E 's/[^a-zA-Z0-9]//g')
      ENVIRONMENT_NAME="tmp_ci_${_NORMALIZED_ENV_NAME}_${AUTHOR}"

      # Check if the environment name exists in the output
      if echo "$output" | grep -q "\b$ENVIRONMENT_NAME\b"; then
          tb \
            --host $TB_HOST \
            --token $TB_ADMIN_TOKEN \
            env rm $ENVIRONMENT_NAME \
            --yes
      else
          echo "Skipping clean up: The Environment '$ENVIRONMENT_NAME' does not exist."
      fi

    # Create new test Environment with data
    - |
      tb \
        --host $TB_HOST \
        --token $TB_ADMIN_TOKEN \
        env create ${ENVIRONMENT_NAME} \
        ${_ENV_FLAGS}

    # List changes with Main Environment
    - tb diff --main --no-verbose

    # Push changes to the test Environment
    - |
      CI_DEPLOY_FILE=./deploy/${VERSION}/ci-deploy.sh
      if [ -f "$CI_DEPLOY_FILE" ]; then
        if ! [[ -x "$CI_DEPLOY_FILE" ]]; then
          echo "Error: You do not have permission to execute '$CI_DEPLOY_FILE'. Run:"
          echo "> chmod +x $CI_DEPLOY_FILE"
          echo "and commit your changes"
        else
          $CI_DEPLOY_FILE
      else
        tb deploy --populate --fixtures --wait
      fi

    # List changes with test Environment (should be empty)
    - tb diff

    - |
      if [ -f ./scripts/exec_test.sh ]; then
        ./scripts/exec_test.sh
      fi

    # Run data quality tests
    - tb test run -v

    # Run pipe regression tests
    - echo ${CI_MERGE_REQUEST_LABELS}
    - REGRESSION_LABELS=$(echo "${CI_MERGE_REQUEST_LABELS}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
    - echo ${REGRESSION_LABELS}
    - tb env regression-tests coverage --wait $(echo ${REGRESSION_LABELS} | tr , ' ')

.run_cd:
  stage: cd
  image: ${IMAGE_BASE}
  interruptible: true
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
  script:
    - *validate_input
    - _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
    - source .tinyenv

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Check all the data files syntax
    - tb check

    # Create new test Environment with data
    - |
      tb \
        --host $TB_HOST \
        --token $TB_ADMIN_TOKEN \
        env create tmp_cd_${_NORMALIZED_ENV_NAME}_${CI_COMMIT_SHORT_SHA} \
        ${_ENV_FLAGS}

    # List changes with Main Environment
    - tb diff --main --no-verbose

    # Push changes to the test Environment
    - |
      CI_DEPLOY_FILE=./deploy/${VERSION}/ci-deploy.sh
      if [ -f "$CI_DEPLOY_FILE" ]; then
        if ! [[ -x "$CI_DEPLOY_FILE" ]]; then
          echo "Error: You do not have permission to execute '$CI_DEPLOY_FILE'. Run:"
          echo "> chmod +x $CI_DEPLOY_FILE"
          echo "and commit your changes"
        else
          $CI_DEPLOY_FILE
      else
        tb deploy --populate --fixtures --wait
      fi

    # List changes with test Environment (should be empty)
    - tb diff

    # Deploy changes to the main Workspace
    - |
      if [ "$TB_DEPLOY" = "true" ]; then
        tb env deploy --semver ${VERSION} --wait
        tb release ls
      else
        CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
        if [ ! -f "$CD_DEPLOY_FILE" ]; then
          tb auth \
            --host $TB_HOST \
            --token $TB_ADMIN_TOKEN
          tb deploy
        fi
      fi

    # OPTIONALLY run post CD deploy commands (e.g.: tb pipe populate)
    - |
      CD_DEPLOY_FILE=./deploy/${VERSION}/cd-deploy.sh
      if [ -f "$CD_DEPLOY_FILE" ]; then
        if ! [[ -x "$CD_DEPLOY_FILE" ]]; then
          echo "Error: You do not have permission to execute '$CD_DEPLOY_FILE'. Run:"
          echo "> chmod +x $CD_DEPLOY_FILE"
          echo "and commit your changes"
        else
          $CD_DEPLOY_FILE
      fi

.cleanup_ci_branch:
  stage: cleanup
  image: ${IMAGE_BASE}
  script:
    - *validate_input
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
    - AUTHOR=$(echo "$CI_COMMIT_AUTHOR" | sed -E 's/[^a-zA-Z0-9]//g')
    - ENVIRONMENT_NAME="tmp_ci_${_NORMALIZED_ENV_NAME}_${AUTHOR}"

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Remove test Environment
    - |
      tb \
      --host $TB_HOST \
      --token $TB_ADMIN_TOKEN \
      env rm ${ENVIRONMENT_NAME} \
      --yes

.cleanup_cd_branch:
  stage: cleanup
  image: ${IMAGE_BASE}
  script:
    - *validate_input
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR
    - _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Remove Environment
    - |
      tb \
      --host $TB_HOST \
      --token $TB_ADMIN_TOKEN \
      env rm tmp_cd_${_NORMALIZED_ENV_NAME}_${CI_COMMIT_SHORT_SHA} \
      --yes

.release_promote:
  stage: release
  image: ${IMAGE_BASE}
  script:
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Promote Release
    - |
      source .tinyenv
      tb \
      --host $TB_HOST \
      --token $TB_ADMIN_TOKEN \
      release promote \
      --semver $VERSION

.release_rollback:
  stage: release
  image: ${IMAGE_BASE}
  script:
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Promote Release
    - |
      source .tinyenv
      tb \
      --host $TB_HOST \
      --token $TB_ADMIN_TOKEN \
      release rollback

.release_rm:
  stage: release
  image: ${IMAGE_BASE}
  script:
    - cd $CI_PROJECT_DIR/$DATA_PROJECT_DIR

    # Create Python Virtual Environment
    - python -m venv .venv
    - source .venv/bin/activate

    # Install Tinybird CLI
    - |
      if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
      else
        pip install tinybird-cli
      fi

    # Tinybird version
    - tb --version

    # Promote Release
    - |
      source .tinyenv
      tb \
      --host $TB_HOST \
      --token $TB_ADMIN_TOKEN \
      release rm --semver $VERSION
